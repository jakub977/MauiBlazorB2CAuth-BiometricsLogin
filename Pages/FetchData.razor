@page "/fetchdata"


@inject WeatherForecastService ForecastService




@if (Globals.IsLoading)
{
    <div class="loading-spinner" style="@($"display: { (Globals.IsLoading ? "flex" : "none") }")">
        <div class="spinner"></div>
    </div>
}
else
{
    <AuthorizeView>
        <Authorized>
            <h1>Weather forecast</h1>

            <p>This component demonstrates fetching data from a service.</p>

            @if (forecasts != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in forecasts)
                        {
                            <tr>
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td>@forecast.Summary</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }


            <!-- Log Out Modal Component -->
            <LogoutModalComponent></LogoutModalComponent>

        </Authorized>

        <NotAuthorized>
            You are not authorized to see weather data. Log in!

            <!-- Log In Modal -->
            <LoginModalComponent></LoginModalComponent>

        </NotAuthorized>
    </AuthorizeView>
}




@code {
    WeatherForecast[] forecasts;



    protected override async Task OnInitializedAsync()
    {
        Globals.IsLoading = true;

        await Task.Delay(500);

        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        Globals.IsLoading = false;
    }
}