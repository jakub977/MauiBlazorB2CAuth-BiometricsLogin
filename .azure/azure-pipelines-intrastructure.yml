

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Ref-Infrastructure
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'


steps:
- script: echo 'Verze $(Major).$(Minor).$(Patch)'
  displayName: 'Installed version'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 6.x
    performMultiLevelLookup: true
    includePreviewVersions: true # Required for preview versions
    
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet tool'

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages for solutions include Telemedicine feed'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'select'
    vstsFeed: 'Telemedicína/Telemedicine'
    includeNuGetOrg: true
  

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
- task: DotNetCoreCLI@2
  displayName: 'Build $(mainProject)'
  inputs:
    command: 'build'
    projects: '$(mainProject)'
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactStagingDirectory)'
- task: DotNetCoreCLI@2
  displayName: 'Build $(sharedProject)'
  inputs:
    command: 'build'
    projects: '$(sharedProject)'
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactStagingDirectory)'



- task: DotNetCoreCLI@2
  displayName: 'Run xUnit Tests for $(mainProject)'
  inputs:
    command: 'custom'
    custom: 'test'
    projects: '**/Principal.Telemedicine.Shared.Intrastructure.Test.csproj'
    arguments: '--configuration $(buildConfiguration)'
    buildProperties: 

- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet Package for $(mainProject)'
  inputs:
    command: 'pack'
    packagesToPack: '$(mainProject)'
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
    outputDir: '$(Build.ArtifactStagingDirectory)\Infrastructure'

- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet Package for $(sharedProject)'
  inputs:
    command: 'pack'
    packagesToPack: '$(sharedProject)'
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
    outputDir: '$(Build.ArtifactStagingDirectory)\Shared'

- task: PowerShell@2
  displayName: 'Copy DLLs from  shared project to main project'
  inputs:
    targetType: 'inline'
    script: |
      $sharedDLLPath = "$(Build.ArtifactStagingDirectory)\Shared\Principal.Telemedicine.Shared.*.nupkg"

      $mainProjectDLLPath = "$(Build.ArtifactStagingDirectory)\Infrastructure\Principal.Telemedicine.Shared.Infrastructure.*.nupkg"

      Expand-Archive -Path $sharedDLLPath -DestinationPath $(Build.ArtifactStagingDirectory)\SharedPackage
      Expand-Archive -Path $mainProjectDLLPath -DestinationPath $(Build.ArtifactStagingDirectory)\MainProjectPackage
      $sharedDLLFiles = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)\SharedPackage" -Recurse -Filter "*.dll
      $mainProjectDLLFiles = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)\MainProjectPackage" -Recurse -Filter "*.dll"
  
      Copy-Item $sharedDLLFiles -Destination "$(Build.ArtifactStagingDirectory)\MainProjectPackage"
      Compress-Archive -Path "$(Build.ArtifactStagingDirectory)\MainProjectPackage\*" -DestinationPath "$(Build.ArtifactStagingDirectory)\MergedPackage.zip"


- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'
- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/MainProjectPackage/*.nupkg'
    publishVstsFeed: 'Telemedicína/Telemedicine'
    allowPackageConflicts: true