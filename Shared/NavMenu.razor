﻿@using Microsoft.Extensions.Configuration
@using MsalAuthInMauiBlazor.MsalClient
@using System.IdentityModel.Tokens.Jwt
@inject IPCAWrapper _pcaWrapper;
@inject IConfiguration _configuration;
@inject AuthenticationStateProvider _auth;
@inject NavigationManager navigation;


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand mx-auto fw-bolder text-warning" href="">Maui App</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="top-row px-3">
            @if (IsLoggedIn)
            {
                <span class="row">
                    <h6 class="text-white fw-bold col-8 pt-3 mx-4">@name</h6>

                    <button class="btn btn-sm btn-danger col-auto mt-2" @onclick="OnLogoutClicked">Logout</button>
                </span>
            }
            else
            {
                <span>
                    <button class="btn btn-sm btn-success float-end mt-2" @onclick="OnLoginClicked">Login</button>
                </span>
            }
        </div>

        <div class="nav-item px-3 mt-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="user">
                <span class="oi oi-plus" aria-hidden="true"></span> User
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>




@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    bool _isLoggedIn = false;
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private string? name { get; set; }



    // Methods.

    public void GetUsernameFromToken(string token) // Gets the username or email from the token.
    {
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

        if (jsonToken != null)
        {
            // Access the claims from the payload
            var username = jsonToken.Claims.FirstOrDefault(claim => claim.Type == "name")?.Value;

            // If "name" claim is not available, you can try other common claims like "email".
            if (string.IsNullOrEmpty(username))
            {
                username = jsonToken.Claims.FirstOrDefault(claim => claim.Type == "email")?.Value;
            }

            // Assigns the username to a variable name.
            name = username;
        }
    }

    public async void OnLoginClicked()
    {
        IsLoggedIn = false;

        Globals.IsLoading = true;

        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            Globals.AccessToken = result?.AccessToken;
            Globals.GrantedScopes = result?.Scopes;
            Globals.Expires = result?.ExpiresOn;
            Globals.Account = result?.Account;
            if (Globals.AccessToken != null)
            {
                navigation.NavigateTo("/");

                await Task.Delay(250);

                var token = result?.AccessToken;
                IsLoggedIn = true;

                GetUsernameFromToken(token);

                await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

                Globals.IsLoading = false;
            }
        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
                Globals.GrantedScopes = result?.Scopes;
                Globals.Expires = result?.ExpiresOn;
                Globals.Account = result?.Account;
                if (Globals.AccessToken != null)
                {
                    navigation.NavigateTo("/");

                    await Task.Delay(250);

                    var token = result?.AccessToken;
                    IsLoggedIn = true;

                    GetUsernameFromToken(token);

                    await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

                    Globals.IsLoading = false;
                }
            }
            catch (Exception ex)
            {
                // Ignore.
            }
        }
        catch
        {
            IsLoggedIn = false;
        }
    }

    private async void OnLogoutClicked()
    {
        navigation.NavigateTo("/");

        await Task.Delay(500);

        Globals.IsLoading = true;

        await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
        IsLoggedIn = false;
        Globals.AccessToken = null;

        await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

        Globals.IsLoading = false;
    }
}