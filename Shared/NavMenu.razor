@using CommunityToolkit.Maui.Core
﻿@using Microsoft.Extensions.Configuration
@using MsalAuthInMauiBlazor.MsalClient
@using System.IdentityModel.Tokens.Jwt
@inject IPCAWrapper _pcaWrapper;
@inject IConfiguration _configuration;
@inject AuthenticationStateProvider _auth;
@inject NavigationManager navigation;


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand mx-auto fw-bolder text-warning" href="">Maui App</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="top-row px-3">
            @if (Globals.AccessToken != null)
            {
                <span style="margin-right: 1px;" class="row justify-content-between">
                    <h6 style="margin-right: auto;" class="text-white fw-bold col-auto username pt-3 mx-4">@GetUsernameFromToken(Globals.AccessToken)</h6>

                    <button class="btn btn btn-danger loginLogout col-auto" @onclick="OnLogoutClicked">Logout</button>
                </span>
            }
            else
            {
                <span>
                    <button class="btn btn btn-success loginLogout float-end" @onclick="OnLoginClicked">Login</button>
                </span>
            }
        </div>

        <div class="nav-item px-3 navLinkFirst">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="user">
                <span class="oi oi-plus" aria-hidden="true"></span> User
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>




@code {
    // Properties

    private bool isAndroid { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    bool _isLoggedIn = false;
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }


    ToastDuration duration = ToastDuration.Long;
    public double fontSize = 16;


    // Methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Method to check whether the app is running on android or iOS.
            if (DeviceInfo.Current.Platform == DevicePlatform.Android)
            {
                isAndroid = true; // Runs on Android.
            }
            else
            {
                isAndroid = false; // Runs on iOS.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public string GetUsernameFromToken(string token) // Gets the username or email from the token.

    {
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

        var username = "";

        if (jsonToken != null)
        {
            // Access the claims from the payload
            username = jsonToken.Claims.FirstOrDefault(claim => claim.Type == "name")?.Value;

            // If "name" claim is not available, you can try other common claims like "email".
            if (string.IsNullOrEmpty(username))
            {
                username = jsonToken.Claims.FirstOrDefault(claim => claim.Type == "email")?.Value;
            }
        }
        return username; // Returns username.
    }

    public async void OnLoginClicked()
    {
        IsLoggedIn = false;

        Globals.IsLoading = true;

        var toast = Toast.Make("You have successfully signed in!", duration, fontSize); // Creates a toast to show when login succeeds.

        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            Globals.AccessToken = result?.AccessToken;
            Globals.GrantedScopes = result?.Scopes;
            Globals.Expires = result?.ExpiresOn;
            Globals.Account = result?.Account;
            if (Globals.AccessToken != null)
            {
                var token = result?.AccessToken;

                await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

                navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

                IsLoggedIn = true;

                await Task.Delay(250);

                await toast.Show(); // Displays the success toaster.
            }
        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
                Globals.GrantedScopes = result?.Scopes;
                Globals.Expires = result?.ExpiresOn;
                Globals.Account = result?.Account;
                if (Globals.AccessToken != null)
                {
                    var token = result?.AccessToken;

                    await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

                    navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

                    IsLoggedIn = true;

                    await Task.Delay(250);

                    await toast.Show(); // Displays the success toaster.
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        catch
        {
            IsLoggedIn = false;
        }

        Globals.IsLoading = false;
    }

    private async void OnLogoutClicked()
    {
        var toast = Toast.Make("You have successfully signed out from your account!", duration, fontSize); // Creates a toast to show when logout succeeds.

        try
        {
            Globals.IsLoading = true;

            await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
            IsLoggedIn = false;
            Globals.AccessToken = null;

            await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

            navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

            await Task.Delay(500);

            Globals.IsLoading = false;

            await toast.Show(); // Displays the success toaster.
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}