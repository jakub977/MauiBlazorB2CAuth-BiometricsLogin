@inject AuthenticationStateProvider _auth;
@inject NavigationManager navigation;
@inject IPCAWrapper _pcaWrapper;


<!-- Log Out Modal -->
<div class="modal fade" id="logOutModal" tabindex="-1" role="dialog" aria-labelledby="logOutModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-header fw-bolder">
                <h5 class="modal-title" id="logOutModalLabel"> Log out options </h5>
            </div>

            <div class="modal-body fw-bold fs-6">
                Would you like to log out and forget this account or just log out?
            </div>

            <div class="modal-footer">
                <button class="btn btn btn-danger loginLogout float-end" @onclick="OnLogoutClicked"> Logout </button>
                <button class="btn btn btn-warning" @onclick="OnLogoutAndForgetClicked"> Logout and forget </button>
            </div>

        </div>
    </div>
</div>


@code {

    bool _isLoggedIn = false;
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }



    // Methods

    private void OnLogoutAndForgetClicked()
    {
        SecureStorage.Default.RemoveAll(); // Removes the accesToken from cache storage, so new user can log in.

        OnLogoutClicked(); // Calls the method to logout from the account.
    }

    private async void OnLogoutClicked()
    {
        var toast = Toast.Make("You have successfully signed out from your account!", ToastDuration.Long, 16); // Creates a toast to show when logout succeeds.

        try
        {
            Globals.IsLoading = true;

            await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
            IsLoggedIn = false;
            Globals.AccessToken = null;

            await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

            navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

            await Task.Delay(500);

            Globals.IsLoading = false;

            await toast.Show(); // Displays the success toaster.
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
