@inject AuthenticationStateProvider _auth;
@inject NavigationManager navigation;
@inject IPCAWrapper _pcaWrapper;


<!-- Log In Modal -->
<div class="modal fade" id="logInModal" tabindex="-1" role="dialog" aria-labelledby="logInModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-header fw-bolder">
                <h5 class="modal-title" id="logInModalLabel"> Log in to previously used account? </h5>
            </div>

            <div class="modal-body fw-bold fs-6">
                Confirm log in using biometrics or select new Log in.
            </div>

            <div class="modal-footer">
                <button class="btn btn btn-primary loginLogout float-end" @onclick="OnLoginClicked"> New Login </button>
                <button class="btn btn btn-success" @onclick="LoginWithBiometrics"> Login with biometric </button>
            </div>

        </div>
    </div>
</div>




@code {

    bool _isLoggedIn = false;
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }



    // Methods

    public async void OnLoginClicked()
    {
        Globals.AccessToken = null; // Removes the accesToken from Globals variable, so new user can log in.
        SecureStorage.Default.RemoveAll(); // Removes the accesToken from cache storage, so new user can log in.

        IsLoggedIn = false;

        Globals.IsLoading = true;

        var toast = Toast.Make("You have successfully signed in!", ToastDuration.Long, 16); // Creates a toast to show when login succeeds.

        try
        {
            // Check if access token is already cached
            string cachedToken = await SecureStorage.Default.GetAsync("accessToken");
            if (cachedToken != null)
            {
                Globals.AccessToken = cachedToken;
            }
            else
            {
                // Attempt silent login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
                Globals.GrantedScopes = result?.Scopes;
                Globals.Expires = result?.ExpiresOn;
                Globals.Account = result?.Account;
                if (Globals.AccessToken != null)
                {
                    var token = result?.AccessToken;
                }
            }
            await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

            navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

            IsLoggedIn = true;

            await Task.Delay(250);

            await toast.Show(); // Displays the success toaster.
        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
                Globals.GrantedScopes = result?.Scopes;
                Globals.Expires = result?.ExpiresOn;
                Globals.Account = result?.Account;
                if (Globals.AccessToken != null)
                {
                    var token = result?.AccessToken;

                    await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

                    navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

                    IsLoggedIn = true;

                    await Task.Delay(250);

                    await toast.Show(); // Displays the success toaster.
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        catch
        {
            IsLoggedIn = false;
        }

        Globals.IsLoading = false;
    }

    public async Task LoginWithBiometrics()
    {
        var isAvailable = await CrossFingerprint.Current.IsAvailableAsync();

        if (isAvailable)
        {
            var request = new AuthenticationRequestConfiguration
            ("Login using biometrics", "Confirm login with your biometrics")
                {
                    FallbackTitle = "Use PIN",
                    AllowAlternativeAuthentication = true,
                };

            var result = await CrossFingerprint.Current.AuthenticateAsync(request);

            if (result.Authenticated)
            {
                Globals.AccessToken = await SecureStorage.Default.GetAsync("accessToken"); // Fills the cached token to sign in a user.

                await _auth.GetAuthenticationStateAsync(); // Rechecks the Authentication state.

                navigation.NavigateTo("/", true); // Forces navigation to the main page and reload.

                IsLoggedIn = true;

                await Task.Delay(250);

                var toast = Toast.Make("You have successfully signed in with biometrics!", ToastDuration.Long, 16); // Creates a toast to show when login succeeds.
                await toast.Show(); // Displays the success toaster.
            }
            else
            {
                var toast = Toast.Make("You have NOT signed in with biometrics!", ToastDuration.Long, 16); // Creates a toast to show when login succeeds.
                await toast.Show(); // Displays the errror toaster.
            }
        }
        else
        {
            var toast = Toast.Make("Biometric login is not set on your phone!", ToastDuration.Long, 16); // Creates a toast to show when login succeeds.
            await toast.Show(); // Displays the success toaster.
        }
    }
}
